# ICRC-107: Fee Collection

## 1. Introduction & Motivation

Many ICRC-based ledgers (such as **ckBTC**) already implement partial fee collection, often charging fees for **transfer** transactions but not for **approve** transactions. However, there is currently no standardized way to:

1. Indicate and configure **who** should collect fees (or if fees are burned).
2. Record fee collection settings directly in ledger blocks.
3. Provide clear semantics for wallets, explorers, and other integrations to **interpret** fee settings in a consistent way.

**ICRC-107** aims to address this gap by defining:

- A mechanism to specify **fee collection settings** (collector account and applicable operations) directly in blocks.
- A **backward-compatible standard** for **recording and interpreting fee-collection fields** in ICRC-3 blocks corresponding to ICRC-1 and ICRC-2 transactions.
- Clear rules on how fee collection settings evolve over time and how subsequent blocks rely on prior updates.

This design ensures that **all** fee-related information is stored entirely **on-chain** in the block history, without reliance on external metadata or specialized block types. It provides a fully self-contained, transparent standard for fee collection that simplifies integration with wallets, explorers, and other tools.

---

## 2. Overview

For each block, the fee amount and the account paying the fee are determined according to rules specific to the block type.
The fee collection settings then determine if the fee is **collected** (removed from the payer account and added to a fee collector account)
or **burned** (removed from the payer account and from the total supply):


---

## 4. Fee Collection Settings

Fee collection settings determine the procedures for handling transaction fees within the ledger. These settings specify whether a fee is collected by an account or burned. When a transaction incurs a fee, the active fee collection settings at the time the block is created dictate how the fee is handled:

- If a **fee collector account** (`fee_col`) is set, the fee is transferred to that account.
- If no **fee collector account** is set, the fee is burned (removed from circulation).
- The **operations list** (`col_ops`) defines which transaction types are subject to fee collection.
- Changes to fee collection settings are recorded directly in blocks, ensuring an **on-chain history** of modifications.

The following subsections describe the fields in blocks that manage fee collection settings and how they are used in transactions.

### 4.1 Fields in Blocks

A block **MAY** include the following fields to define or update fee collection settings:

1. **fee_col** (optional, `Map<Value>`)
   - `principal`: `Blob` - The principal of the fee collector.
   - `subaccount`: `Blob` (optional) - The subaccount identifier, if applicable.

2. **col_ops** (optional, `Vec<Text>`)   An array of operation types (strings) for which fees **should** be collected.   If `col_ops` is omitted, it defaults to `["transfer"]` (fee is collected for transfers only).

3. **prev_fee_col_info** (optional, `Nat`)   A natural number (`Nat`) referencing the block index at which the ledger last updated `fee_col` or `col_ops`.   If present, it helps external tools quickly locate the previous fee collection settings.

---

## 5. Determining Fee Collection for ICRC-1 and ICRC-2 Blocks

### 5.1 How to Calculate the Fee for ICRC-1 and ICRC-2 blocks

The format of blocks follows the ICRC-3 standard. For a complete specification of block structure and fields, refer to [ICRC-3 Standard](https://github.com/dfinity/ICRC/blob/main/ICRCs/ICRC-3.md).

To determine the **final fee amount** for a given block:

1. **Check `tx.fee`**
   - If present, the value of `tx.fee` is the fee for this block.

2. **Else, check the top-level `fee` field**
   - If `tx.fee` is **not set**, and a top-level field `fee` exists in the block, then that is the fee.

3. **Else, fallback to `0`**
   - If **neither** `tx.fee` nor `fee` is present, the default fee is `0`.

The paying account is the source account for both transfers and approve transactions.


### 5.2 How `col_ops` Determines Fee Collection

The `col_ops` field defines which block types incur a fee that is collected (instead of burned). For ICRC-1 and ICRC-2 blocks, the mapping from a `col_ops` entry to actual block types is:

| **col_ops Entry** | **Block Types Affected**                                                                                 |
|-------------------|----------------------------------------------------------------------------------------------------------|
| **"transfer"**    | Blocks with `btype = "1xfer"` or `btype = "2xfer"`. If `btype` is not set, then `tx.op = "xfer"` or `"2xfer"`. |
| **"approve"**     | Blocks with `btype = "2approve"`. If `btype` is not set, then `tx.op = "approve"`.                        |

**Note**: By merging the `"transfer"` and `"icrc2_transfer"` concept, any reference to `"transfer"` in `col_ops` applies to **both** ICRC-1 (`1xfer`) **and** ICRC-2 (`2xfer`) blocks.

Concretely,

1. **Identify Block Type**
   - If `btype` is present, it takes precedence.
   - Otherwise, use `tx.op`.

2. **Check `col_ops`**
   - If the block type is in `col_ops`, the fee is collected by the active `fee_col`.
   - Otherwise, the fee is burned.

If no `fee_col` is set, the fee is burned by default.

---

## 6. Minimal API for Fee Collection Settings

### 6.1 `set_fee_collection`

```
set_fee_collection: (opt Map<Value>, opt Vec<Text>) -> ();
```

### 6.2 `get_fee_collection`

```
get_fee_collection: () -> (opt Map<Value>, Vec<Text>) query;
```

---

## 7. Summary

- **On-Chain Configuration**: Fee collection settings (`fee_col`, `col_ops`) are updated via blocks, with no external metadata needed.
- **Fee Collection & Burning**: If `fee_col` is set, the fee is credited to the collector; otherwise, it is burned.
- **Governance**: Only the **ledger controller** can update fee collection settings.
- **Backward-Compatible**: Works seamlessly with ICRC-1, ICRC-2, and ICRC-3 block definitions.

---
